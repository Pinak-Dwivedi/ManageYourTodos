{"version":3,"file":"static/js/213.8315ca4f.chunk.js","mappings":"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","sources":["components/confirmBox/ConfirmBox.jsx","components/dashboard/updateProfile/UpdateProfile.jsx","components/dashboard/profileInfo/ProfileInfo.jsx","components/dashboard/users/UserInfo.jsx","components/dashboard/users/Users.jsx","components/dashboard/Dashboard.jsx","components/dashboard/todoListItem/TodoListItem.jsx"],"sourcesContent":["import \"./ConfirmBox.css\";\r\nimport { useEffect , useContext } from \"react\";\r\nimport AuthContext from \"../../index\";\r\n\r\nexport default function ConfirmBox({ confirmBoxRef, deleteFunction})\r\n{   \r\n    const {loading, setLoading} = useContext(AuthContext);\r\n\r\n    useEffect( () => {\r\n\r\n        if(confirmBoxRef.current == null)\r\n        return;\r\n\r\n            const timerId = setTimeout(() => {\r\n                confirmBoxRef.current.classList.remove(\"active\");\r\n            }, 5000)\r\n    \r\n            return () => {\r\n                clearTimeout(timerId)\r\n            }\r\n\r\n    }, [])\r\n\r\n    return(\r\n    <div className=\"confirmBox-overlay\">\r\n\r\n        <div ref = {confirmBoxRef} className=\"confirmBox-container\">\r\n\r\n            <div className=\"confirmBox-message\">⚠️ Are you sure! you want to delete this todo</div>\r\n\r\n            <div className=\"confirmBox-buttonsContainer\">\r\n                <button className=\"confirmBox-button confirmBox-yesButton\" onClick = { () =>\r\n                { \r\n                    if(loading)\r\n                    return false;\r\n\r\n                    deleteFunction(); \r\n                    confirmBoxRef.current.classList.remove(\"active\");\r\n\r\n                }}>Yes</button>\r\n                <button className=\"confirmBox-button confirmBox-noButton\" onClick={ () => confirmBoxRef.current.classList.remove(\"active\") }>No</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    )\r\n}","import \"./UpdateProfile.css\";\r\nimport {useState, useContext} from 'react';\r\nimport AuthContext from '../../../index';\r\nimport toast from \"react-hot-toast\";\r\n\r\nexport default function UpdateProfile()\r\n{\r\n    const { authUser, setAuthUser, loading, setLoading } = useContext(AuthContext);\r\n\r\n    const [updateName, setUpdateName] = useState(authUser.name);\r\n    const [updateEmail, setUpdateEmail] = useState(authUser.email);\r\n    const [error, setError] = useState({});\r\n\r\n    async function updateProfile(e)\r\n    {\r\n        setLoading(true);\r\n        e.preventDefault();\r\n        try {\r\n            \r\n            const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/users/${authUser.id}`,{\r\n                method: \"PUT\",\r\n                credentials: \"include\",\r\n                headers: {\r\n                    \"Content-Type\":\"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    name: updateName,\r\n                    email: updateEmail\r\n                })\r\n            })\r\n\r\n            const data = await response.json();\r\n            // console.log(data)\r\n\r\n            setError({});\r\n            \r\n            if(!data.success)\r\n            throw data;\r\n\r\n            setAuthUser(data.user);\r\n\r\n            setLoading(false);\r\n            toast.success(data.message);\r\n\r\n        } catch (err) {\r\n\r\n            // console.log(err);\r\n            setLoading(false);\r\n            //validation errors\r\n            if(typeof err.error === \"object\")\r\n            {\r\n                const e = {}; \r\n                err.error.forEach( err => {\r\n\r\n                    for(let key in err)\r\n                    e[key] = err[key][0]\r\n\r\n                });\r\n                setError(e);\r\n            }\r\n            else\r\n            toast.error(err.message);\r\n        }\r\n    }\r\n\r\n    return(\r\n    <form onSubmit={(e)=>\r\n        {\r\n            if(loading)\r\n            return false;\r\n            \r\n            updateProfile(e)\r\n        }}className=\"profile-update-form\">\r\n\r\n        <div className=\"profile-update-form-field\">\r\n            <label className=\"profile-update-form-label\" htmlFor=\"name\">Name</label>\r\n            <input className=\"profile-update-form-input\" required type=\"text\" id=\"name\" value={updateName} onChange={event => setUpdateName(event.target.value)}/>\r\n\r\n            <span className=\"profile-update-form-error\">{error.name}</span>\r\n        </div>\r\n\r\n        <div className=\"profile-update-form-field\">\r\n            <label className=\"profile-update-form-label\" htmlFor=\"email\">Email</label>\r\n            <input className=\"profile-update-form-input\" required type=\"text\" id=\"email\" value={updateEmail} onChange={event => setUpdateEmail(event.target.value)}/>\r\n\r\n            <span className=\"profile-update-form-error\">{error.email}</span>\r\n        </div>\r\n\r\n        <button className=\"profile-update-form-submitButton\" type=\"submit\">Update Profile</button>\r\n    </form>   \r\n    )\r\n}","import \"./ProfileInfo.css\";\r\nimport {useRef, useEffect} from 'react';\r\nimport { FaUserTie } from 'react-icons/fa';\r\nimport UpdateProfile from '../updateProfile/UpdateProfile';\r\n\r\nexport default function ProfileInfo( {profileImage} )\r\n{\r\n    const profileRef = useRef();\r\n\r\n    useEffect(()=>{\r\n        function handleClick(event){\r\n\r\n            if(profileRef.current == null)\r\n            return; \r\n\r\n            const toggleProfileButton = profileRef.current.firstChild;\r\n    \r\n            const isProfileDropdownButton = event.target === toggleProfileButton;\r\n\r\n            if(!isProfileDropdownButton && event.target.closest(\".dashboard-profile-info\") != null ) return\r\n\r\n            if(isProfileDropdownButton)\r\n            {\r\n                profileRef.current.classList.toggle(\"active\");\r\n            }\r\n            else\r\n            {\r\n                profileRef.current.classList.remove(\"active\");\r\n            }\r\n        }\r\n        document.addEventListener(\"click\", handleClick)\r\n\r\n        return ()=>document.removeEventListener(\"click\", handleClick)\r\n    },[])\r\n\r\n    return(\r\n        \r\n    <div ref = {profileRef} className=\"dashboard-profile-info\">\r\n        \r\n        <button className=\"dashboard-profile-info-button\">\r\n            {\r\n            profileImage == null ? \r\n            <FaUserTie  className=\"dashboard-profile-info-image\" size={\"5rem\"} color=\"#009fbd\"/>\r\n            :\r\n            <img className=\"dashboard-profile-info-image\" src={`${process.env.REACT_APP_SERVER_URL}/${profileImage}`} />\r\n            }   \r\n        </button>\r\n        \r\n        <div className=\"dashboard-profile-info-content\">\r\n            <UpdateProfile/>\r\n        </div>    \r\n    </div>\r\n    )\r\n}","import {useState, useRef, useContext} from \"react\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {BsFillPencilFill} from \"react-icons/bs\"\r\nimport ConfirmBox from \"../../confirmBox/ConfirmBox\";\r\nimport toast from \"react-hot-toast\";\r\nimport AuthContext from \"../../../index\";\r\n\r\nexport default function UserInfo({setUsers, userId, userName, userEmail})\r\n{\r\n    const {loading, setLoading} = useContext(AuthContext);\r\n\r\n    const [updateName, setUpdateName] = useState(userName);\r\n    const [updateEmail, setUpdateEmail] = useState(userEmail);\r\n    const [error, setError] = useState([]);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const confirmBoxRef = useRef();\r\n\r\n    async function updateUser()\r\n    {\r\n        setLoading(true);\r\n        try {\r\n            \r\n            const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/users/${userId}`,{\r\n                method: \"PUT\",\r\n                credentials: \"include\",\r\n                headers: {\r\n                    \"Content-Type\":\"application/json\"\r\n                },\r\n                body: JSON.stringify({\r\n                    name: updateName,\r\n                    email: updateEmail\r\n                })\r\n            })\r\n\r\n            const data = await response.json();\r\n\r\n            // console.log(data);\r\n\r\n            setError({});\r\n\r\n            if(!data.success)\r\n            throw data;\r\n\r\n\r\n            setLoading(false);\r\n            toast.success(data.message);\r\n\r\n        } catch (err) {\r\n\r\n            // console.log(err);\r\n            setLoading(false);\r\n\r\n             //validation errors\r\n        if(typeof err.error === \"object\")\r\n        {\r\n          const e = {}; \r\n          err.error.forEach( err => {\r\n\r\n            for(let key in err)\r\n            e[key] = err[key][0]\r\n\r\n          });\r\n          setError(e);\r\n        }\r\n        else\r\n        toast.error(err.error);\r\n        }\r\n    }\r\n\r\n    async function deleteUser()\r\n    {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/users/${userId}`,{\r\n                method: \"DELETE\",\r\n                credentials: \"include\"\r\n            })\r\n\r\n            const data = await response.json();\r\n\r\n            // console.log(data);\r\n\r\n            if(!data.success)\r\n            throw data;\r\n\r\n            setUsers( prevUsers => {\r\n                return prevUsers.filter( user => {\r\n                    return user.id !== userId\r\n                })\r\n            })\r\n\r\n            setLoading(false);\r\n            toast.success(data.message);\r\n\r\n        } catch (err) {\r\n            // console.log(error)\r\n            setLoading(false);\r\n            toast.error(err.error);\r\n        }   \r\n    }\r\n\r\n    return(\r\n        <>\r\n        <ConfirmBox confirmBoxRef = {confirmBoxRef} deleteFunction = {deleteUser}/>\r\n\r\n        <div className=\"user-info\">\r\n            <div className=\"user-id\">{userId}</div>\r\n\r\n            <div className=\"user-info-field\">\r\n                <div className=\"user-info-field-input\">\r\n                <BsFillPencilFill/>\r\n                <input className=\"user-name\" type=\"text\" value={updateName} onChange={ (e) => setUpdateName(e.target.value)} />\r\n                </div>\r\n                <span className=\"user-info-field-error\">{error.name}</span>\r\n            </div>\r\n            \r\n            <div className=\"user-info-field\">\r\n                <div className=\"user-info-field-input\">\r\n                <BsFillPencilFill/>\r\n                <input className=\"user-email\" type=\"text\" value={updateEmail} onChange={ (e) => setUpdateEmail(e.target.value)}/>\r\n                </div>\r\n                <span className=\"user-info-field-error\">{error.email}</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"user-buttons\">\r\n            <button className=\"user-view-todos-button user-button\" onClick={() => navigate(`/usertodos/${userId}`, {state: {userName: updateName}})}>View Todos</button>\r\n            <button className=\"user-update-button user-button\" onClick={updateUser}>Update</button>\r\n            <button className=\"user-delete-button user-button\" onClick={() => confirmBoxRef.current.classList.add(\"active\") }>Delete</button>\r\n        </div>\r\n        </>\r\n    )\r\n}","import \"./Users.css\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport UserInfo from \"./UserInfo\";\r\nimport AuthContext from \"../../../index\";\r\n\r\nexport default function Users()\r\n{\r\n    const {authUser} = useContext(AuthContext);\r\n    const [users, setUsers] = useState([]);\r\n\r\n\r\n    useEffect( () => {\r\n        \r\n        (async () => {\r\n\r\n            try {     \r\n                \r\n                const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/users`,{\r\n                    credentials: \"include\"\r\n                });\r\n\r\n                const data = await response.json();    \r\n\r\n                if(!data.success)\r\n                throw data;\r\n\r\n                setUsers(data.data);\r\n            } catch (error) {\r\n                \r\n                // console.log(error);\r\n            }\r\n\r\n        })();\r\n    },[])\r\n\r\n    return(\r\n        <div className=\"users-container\">\r\n            <div className=\"users-table\">\r\n                <div className=\"users-table-row\">\r\n                    <div className=\"user-info user-info-heading\">\r\n                        <div className=\"user-id\">Id</div>\r\n                        <div className=\"user-info-field\">Name</div>\r\n                        <div className=\"user-info-field\">Email</div>\r\n                    </div>\r\n                </div>\r\n                {users.map( user => {\r\n                    return(\r\n                    <div key = {user.id} className=\"users-table-row\">\r\n                        <UserInfo setUsers = {setUsers} userId = {user.id} userName={user.name} userEmail={user.email}/>\r\n                    </div>\r\n                    ) \r\n                })}\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}","import './Dashboard.css';\r\nimport { useContext, useEffect, useState} from 'react';\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\n\r\nimport TodoListItem from './todoListItem/TodoListItem';\r\nimport ProfileInfo from './profileInfo/ProfileInfo';\r\nimport Users from './users/Users';\r\nimport AuthContext from '../../index';\r\n\r\nconst Dashboard = () =>{\r\n\r\n    const {authUser, isAuthenticated} = useContext(AuthContext);\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(()=>{\r\n\r\n        (async function fetchTodos()\r\n        {\r\n            try {\r\n                const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/todos/`,{\r\n                    credentials: \"include\"\r\n                });\r\n\r\n                const data = await response.json();\r\n\r\n                // console.log(data);\r\n\r\n                if(!data.success)\r\n                throw data;\r\n                \r\n                setTodos(data.data);\r\n\r\n            } catch (error) {                \r\n                // console.log(error);\r\n            }\r\n\r\n        })();\r\n\r\n    },[])\r\n\r\n    if(!isAuthenticated)\r\n    return <Navigate to=\"/\" />\r\n\r\n    return(\r\n        <div className=\"dashboard-container\">\r\n\r\n            <section className=\"dashboard-profile\">\r\n                <span className=\"dashboard-profile-name\">Welcome {authUser.name}{authUser.role != null ? \"(Admin)\" : null}</span>\r\n\r\n                <ProfileInfo profileImage = {authUser.profileImage}/>\r\n            </section>\r\n\r\n            {authUser.role != null ? \r\n            \r\n            <Users/> : \r\n            \r\n            <section className=\"dashboard-todos\">\r\n                <button className=\"dashboard-todos-addTodoButton\" onClick={ () => navigate(\"/addtodo\") }>ADD TODO</button>\r\n                <h2 className=\"dashboard-todos-heading\">My Todos</h2>\r\n                <div className=\"dashboard-todos-list\">\r\n                    {todos.map( (todo, index) => {\r\n                        return <TodoListItem key={todo.id} setTodos = {setTodos} serialNo={index+1} todoId = {todo.id} title={todo.title} body={todo.body} completed={todo.completed}/>\r\n                    })}   \r\n                </div>\r\n            </section>\r\n            }\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","import \"./TodoListItem.css\";\r\nimport {useState, useEffect, useRef, useContext} from 'react';\r\nimport {BsFillPencilFill} from \"react-icons/bs\"\r\nimport toast from \"react-hot-toast\";\r\nimport ConfirmBox from \"../../confirmBox/ConfirmBox\";\r\nimport AuthContext from \"../../../index\";\r\n\r\nexport default function TodoListItem({setTodos, serialNo, todoId, title, body, completed})\r\n{\r\n    const {loading, setLoading} = useContext(AuthContext);\r\n\r\n    const [todoTitle, setTodoTitle] = useState(title);\r\n    const [todoBody, setTodoBody] = useState(body);\r\n    const [todoCompleted, setTodoCompleted] = useState(completed === 1 ? true : false);\r\n    const [error, setError] = useState({});\r\n    const titleRef = useRef();\r\n    const bodyRef = useRef();\r\n\r\n    const confirmBoxRef = useRef();\r\n\r\n    useEffect(()=>{\r\n        \r\n        titleRef.current.style.height = \"1px\";\r\n        titleRef.current.style.height = (1+titleRef.current.scrollHeight)+\"px\";\r\n\r\n        bodyRef.current.style.height = \"1px\";\r\n        bodyRef.current.style.height = (5+bodyRef.current.scrollHeight)+\"px\";\r\n\r\n    },[todoTitle, todoBody])\r\n\r\n    async function updateTodo()\r\n    {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/todos/${todoId}`,{\r\n                method:\"PUT\",\r\n                headers:{\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                credentials: \"include\",\r\n                body:JSON.stringify({\r\n                    title: todoTitle,\r\n                    body: todoBody,\r\n                    completed: todoCompleted\r\n                })\r\n            })\r\n    \r\n            const data = await response.json();\r\n            setError({});\r\n\r\n            // console.log(data);\r\n            \r\n            if(!data.success)\r\n            throw data;\r\n\r\n            setLoading(false);\r\n            toast.success(data.message);\r\n\r\n        } catch (err) {\r\n            \r\n            setLoading(false);\r\n            //validation errors\r\n            if(typeof err.error === \"object\")\r\n            {\r\n                const e = {}; \r\n                err.error.forEach( err => {\r\n\r\n                    for(let key in err)\r\n                    e[key] = err[key][0]\r\n\r\n                });\r\n                setError(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    async function deleteTodo()\r\n    {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${process.env.REACT_APP_SERVER_URL}/todos/${todoId}`,{\r\n                method:\"DELETE\",\r\n                credentials: \"include\",\r\n            })\r\n    \r\n            const data = await response.json();\r\n\r\n            // console.log(data);\r\n\r\n            if(!data.success)\r\n            throw data;\r\n\r\n            setTodos(preTodos => {\r\n                return preTodos.filter( todo => {\r\n                    return todo.id !== data.data.todoId\r\n                })\r\n            })\r\n            \r\n            setLoading(false);\r\n            toast.success(data.message);\r\n\r\n        } catch (err) {\r\n\r\n            setLoading(false);\r\n            // console.log(err)\r\n            toast.error(err.message);\r\n        }\r\n    }\r\n\r\n    return(\r\n    <>\r\n        <ConfirmBox confirmBoxRef = {confirmBoxRef} deleteFunction = {deleteTodo}/>\r\n\r\n        <div className=\"todos-list-item\">\r\n            <div className=\"todos-list-item-todoSerialNo\">{serialNo}\r\n\r\n            <div className=\"checkBox-container\">\r\n                <input className=\"checkBox-input\" type=\"checkbox\" checked = {todoCompleted} onChange={(e) => setTodoCompleted(e.target.checked)}/>\r\n                <label className=\"checkBox-label\"></label>\r\n            </div>\r\n            \r\n            </div>\r\n\r\n            <div className=\"todos-list-item-todoTitle\">\r\n\r\n                <div className=\"todoContent-wrapper\">\r\n                    <BsFillPencilFill/>\r\n                    <textarea ref={titleRef} className=\"todoTitle-content\" type=\"text\" value={todoTitle} onChange={ (e) => setTodoTitle(e.target.value) }></textarea>\r\n                </div>\r\n                <span className=\"updateTodo-error\">{error.title}</span>\r\n\r\n            </div>\r\n\r\n            <div className=\"todos-list-item-todoBody\">\r\n\r\n                <div className=\"todoContent-wrapper\">\r\n                    <BsFillPencilFill/>\r\n                    <textarea ref={bodyRef} className=\"todoBody-content\" type=\"text\" value={todoBody} onChange={ (e) => setTodoBody(e.target.value) }></textarea>\r\n                </div>\r\n                <span className=\"updateTodo-error\">{error.body}</span>\r\n\r\n            </div>\r\n            \r\n            <div className=\"todos-list-item-todoButtons\">\r\n                <button className=\"todos-list-item-updateTodoButton\" onClick={ () => {\r\n                    if(loading)\r\n                    return false;\r\n\r\n                    updateTodo();\r\n\r\n                }}>Update</button>\r\n                <button className=\"todos-list-item-deleteTodoButton\" onClick={ () => confirmBoxRef.current.classList.add(\"active\") }>Delete</button>\r\n            </div>\r\n        </div>  \r\n    </>\r\n    )\r\n}"],"names":["ConfirmBox","_ref","confirmBoxRef","deleteFunction","_useContext","useContext","AuthContext","loading","setLoading","useEffect","current","timerId","setTimeout","classList","remove","clearTimeout","_jsx","className","children","_jsxs","ref","onClick","UpdateProfile","authUser","setAuthUser","_useState","useState","name","_useState2","_slicedToArray","updateName","setUpdateName","_useState3","email","_useState4","updateEmail","setUpdateEmail","_useState5","_useState6","error","setError","_updateProfile","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","response","data","_e","wrap","_context","prev","next","preventDefault","fetch","concat","process","id","method","credentials","headers","body","JSON","stringify","sent","json","success","user","toast","message","t0","forEach","err","key","stop","apply","arguments","onSubmit","_x","updateProfile","htmlFor","required","type","value","onChange","event","target","ProfileInfo","profileImage","profileRef","useRef","handleClick","toggleProfileButton","firstChild","isProfileDropdownButton","closest","toggle","document","addEventListener","removeEventListener","FaUserTie","size","color","src","UserInfo","setUsers","userId","userName","userEmail","navigate","useNavigate","_updateUser","_deleteUser","_callee2","_context2","prevUsers","filter","_Fragment","BsFillPencilFill","state","add","Users","users","map","isAuthenticated","todos","setTodos","_fetchTodos","role","todo","index","TodoListItem","serialNo","todoId","title","completed","Navigate","to","todoTitle","setTodoTitle","todoBody","setTodoBody","todoCompleted","setTodoCompleted","_useState7","_useState8","titleRef","bodyRef","_updateTodo","_deleteTodo","preTodos","style","height","scrollHeight","checked","updateTodo"],"sourceRoot":""}